<?php

namespace App\Http\Controllers;

use DB;

use Illuminate\Http\Request;
use App\Models\Shipment\ItemIssuance;
use App\Models\Inventory\Inventory;
use App\Http\Controllers\Controller;
use App\Http\Resources\Shipment\ItemIssuance as ItemIssuanceOneCollection;
use App\Http\Resources\Shipment\ItemIssuanceCollection;
use App\Models\Inventory\GoodsMovement;
use App\Models\Inventory\MaterialTransfer;
use App\Models\Inventory\MaterialTransferItem;
use App\Models\Inventory\MaterialTransferRealisation;
use App\Models\Inventory\MaterialTransferShipmentRelationship;
use App\Models\Order\OrderItem;
use App\Models\Order\PurchaseOrder;

class ItemIssuanceController extends Controller
{
  /**
   * Display a listing of the resource.
   *
   * @param  \Illuminate\Http\Request  $request
   * @return \Illuminate\Http\Response
   */
  public function index(Request $request)
  {
    $param = $request->all();
    $query = ItemIssuance::all();

    return new ItemIssuanceCollection($query);
  }

  /**
   * Show the form for creating a new resource.
   *
   * @return \Illuminate\Http\Response
   */
  public function create()
  {
    //
  }

  /**
   * Store a newly created resource in storage.
   *
   * @param  \Illuminate\Http\Request  $request
   * @return \Illuminate\Http\Response
   */
  public function store(Request $request)
  {
    $param = $request->all()['payload'];
    try {

      DB::beginTransaction();

      //check if this shipment already issued or the quantity is enough
      $mtsr = MaterialTransferShipmentRelationship::where('shipment_id', $param['shipment_id'])->get();

      if (count($mtsr)) {
        //check if the quantity is below
        return response()->json([
          'success' => false,
          'message' => 'sorry, you cannot issued twice'
        ]);
      }

      $to_facility_id = $param['to_facility_id'];
      $from_facility_id = $param['from_facility_id'];
      $date = date("Y-m-d");
      $prep = [
        'to_facility_id' => $to_facility_id,
        'from_facility_id' => $from_facility_id,
        'est_transfer_date' => $date,
        'user_id' => $param['user_id'],
        'description' => 'Automatically Generated by System'
      ];

      $mt = MaterialTransfer::create($prep);
      DB::commit();

      foreach ($param['items'] as $key) {
        $_temp = [
          'material_transfer_id' => $mt['id'],
          'product_id' => $key['product_id'],
          'product_feature_id' => $key['product_feature_id'],
          'order_item_id' => $key['order_item_id'],
          'transfer_qty' => $key['deliv_qty']
        ];

        $mti = MaterialTransferItem::create($_temp);
        DB::commit();

        $mtr = MaterialTransferRealisation::create([
          'material_transfer_id' => $mt['id'],
          'material_transfer_item_id' => $mti['id'],
          'transferred_qty' => $key['deliv_qty']
        ]);
        DB::commit();

        // substract qty from from_facility_id and make record on goods movement
        GoodsMovement::create([
          'date' => $date,
          'material_transfer_id' => $mt['id'],
          'material_transfer_item_id' => $mti['id'],
          'material_transfer_item_realisation_id' => $mtr['id'],
          'facility_id' => $from_facility_id,
          'goods_id' => $key['goods_id'],
          'product_id' => $key['product_id'],
          'product_feature_id' => $key['product_feature_id'],
          'type_movement' => 2, // 1 for incoming and 2 outbound
          'qty' => $key['deliv_qty'] * -1,
          // adding order_item
          'order_item_id' => $key['order_item_id']
        ]);
        DB::commit();

        //add qty from to_facility_id and make record on goods_movement;
        GoodsMovement::create([
          'date' => $date,
          'material_transfer_id' => $mt['id'],
          'material_transfer_item_id' => $mti['id'],
          'material_transfer_item_realisation_id' => $mtr['id'],
          'facility_id' => $to_facility_id,
          'goods_id' => $key['goods_id'],
          'product_id' => $key['product_id'],
          'product_feature_id' => $key['product_feature_id'],
          'type_movement' => 1, // 1 for incoming and 2 outbound
          'qty' => $key['deliv_qty'],
          // adding order_item
          'order_item_id' => $key['order_item_id']
        ]);
        DB::commit();
      }

      MaterialTransferShipmentRelationship::create([
        'shipment_id' => $param['shipment_id'],
        'material_transfer_id' => $mt['id']
      ]);
      DB::commit();
    } catch (Exception $th) {
      DB::rollback();
      return response()->json([
        'success' => false,
        'errors' => $th->getMessage()
      ], 500);
    }
    return response()->json([
      'success' => true
    ], 200);
  }

  /**
   * Store a newly created resource in storage.
   * This function enables to record goods movement for receive goods
   *
   * @param  \Illuminate\Http\Request  $request
   * @return \Illuminate\Http\Response
   */
  public function storeV2(Request $request)
  {
    $param = $request->all()['payload'];
    try {

      DB::beginTransaction();

      // check if this shipment already issued or the quantity is enough
      $mtsr = MaterialTransferShipmentRelationship::where('shipment_id', $param['shipment_id'])->get();

      if (count($mtsr)) {
        //check if the quantity is below
        return response()->json([
          'success' => false,
          'message' => 'sorry, you cannot issued twice'
        ]);
      }

      $to_facility_id = $param['to_facility_id'];
      $from_facility_id = $param['from_facility_id'];
      $date = date("Y-m-d");
      $prep = [
        'to_facility_id' => $to_facility_id,
        'from_facility_id' => $from_facility_id,
        'est_transfer_date' => $date,
        'user_id' => $param['user_id'],
        'description' => 'Automatically Generated by System'
      ];

      $mt = MaterialTransfer::create($prep);
      DB::commit();

      foreach ($param['items'] as $key) {
        $import_flag = 0;
        if (isset($key['order_item_id'])) {
          $order_item_id = $key['order_item_id'];

          $order_item = OrderItem::select('order_id')->find($order_item_id);

          // Check if $order_item is not null before proceeding
          if ($order_item) {
            $purchase_order = PurchaseOrder::select('import_flag')->where('order_id', $order_item['order_id'])->get();

            // Check if $purchase_order has any records
            if ($purchase_order->count() > 0) {
              // Directly access the first element's import_flag
              $import_flag = $purchase_order->first()->import_flag;
            }
          }

          // Use $order_item_id here since it exists and is not null
        } else {
          $order_item_id = null;
          // Handle the case where 'order_item_id' doesn't exist or is null
        }

        $_temp = [
          'import_flag' => $import_flag,
          'material_transfer_id' => $mt['id'],
          'product_id' => $key['product_id'],
          'product_feature_id' => $key['product_feature_id'],
          'order_item_id' => $key['order_item_id'],
          'transfer_qty' => $key['deliv_qty']
        ];

        $mti = MaterialTransferItem::create($_temp);
        DB::commit();

        $mtr = MaterialTransferRealisation::create([
          'material_transfer_id' => $mt['id'],
          'material_transfer_item_id' => $mti['id'],
          'transferred_qty' => $key['deliv_qty']
        ]);
        DB::commit();

        // substract qty from from_facility_id and make record on goods movement
        GoodsMovement::create([
          'date' => $date,
          'import_flag' => $import_flag,
          'material_transfer_id' => $mt['id'],
          'material_transfer_item_id' => $mti['id'],
          'material_transfer_item_realisation_id' => $mtr['id'],
          'facility_id' => $from_facility_id,
          'goods_id' => $key['goods_id'],
          'product_id' => $key['product_id'],
          'product_feature_id' => $key['product_feature_id'],
          'type_movement' => 2, // 1 for incoming and 2 outbound
          'qty' => $key['deliv_qty'] * -1,
          // adding order_item_id
          'order_item_id' => $order_item_id
        ]);
        DB::commit();

        //add qty from to_facility_id and make record on goods_movement;
        GoodsMovement::create([
          'date' => $date,
          'import_flag' => $import_flag,
          'material_transfer_id' => $mt['id'],
          'material_transfer_item_id' => $mti['id'],
          'material_transfer_item_realisation_id' => $mtr['id'],
          'facility_id' => $to_facility_id,
          'goods_id' => $key['goods_id'],
          'product_id' => $key['product_id'],
          'product_feature_id' => $key['product_feature_id'],
          'type_movement' => 1, // 1 for incoming and 2 outbound
          'qty' => $key['deliv_qty'],
          // adding order_item_id
          'order_item_id' => $order_item_id
        ]);
        DB::commit();
      }

      MaterialTransferShipmentRelationship::create([
        'shipment_id' => $param['shipment_id'],
        'material_transfer_id' => $mt['id']
      ]);
      DB::commit();
    } catch (Exception $th) {
      DB::rollback();
      return response()->json([
        'success' => false,
        'errors' => $th->getMessage()
      ], 500);
    }
    return response()->json([
      'success' => true
    ], 200);
  }

  /**
   * Display the specified resource.
   *
   * @param  \App\X  $X
   * @return \Illuminate\Http\Response
   */
  public function show($id)
  {
    try {
      $query = ItemIssuance::find($id);
      return new ItemIssuanceOneCollection($query);
    } catch (Exception $th) {
      return response()->json([
        'success' => false,
        'errors' => $e->getMessage()
      ], 500);
    }
  }

  /**
   * Show the form for editing the specified resource.
   *
   * @param  \App\X  $X
   * @return \Illuminate\Http\Response
   */
  public function edit(X $x)
  {
    //
  }

  /**
   * Update the specified resource in storage.
   *
   * @param  \Illuminate\Http\Request  $request
   * @param  \App\X  $X
   * @return \Illuminate\Http\Response
   */
  public function update($id, Request $request)
  {
    $param = $request->all()['payload'];
    try {
      ItemIssuance::find($id)->update($param);
    } catch (Exception $th) {
      return response()->json([
        'success' => false,
        'errors' => $e->getMessage()
      ], 500);
    }
    return response()->json([
      'success' => true
    ], 200);
  }

  /**
   * Remove the specified resource from storage.
   *
   * @param  \App\X  $X
   * @return \Illuminate\Http\Response
   */
  public function destroy($id)
  {
    try {
      ItemIssuance::find($id)->delete();
      return response()->json(['success' => true], 200);
    } catch (Exception $th) {
      //throw $th;
      return response()->json([
        'success' => false,
        'errors' => $th->getMessage()
      ]);
    }
  }
}
